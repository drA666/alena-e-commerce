// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                    String        @id @default(cuid())
  name                  String        @default("")
  email                 String        @unique @default("")
  password              String
  role                  UserRoleType? @default(customer)
  useraddress           UserAddress[] @relation("User_useraddress")
  from_UserAddress_user UserAddress[] @relation("UserAddress_user")
  from_ItemsCart_user   ItemsCart[]   @relation("ItemsCart_user")
  from_Booking_user     Booking[]     @relation("Booking_user")
  from_Booking_employee Booking[]     @relation("Booking_employee")
  from_Delivery_worker  Delivery[]    @relation("Delivery_worker")
}

model UserAddress {
  id                    String    @id @default(cuid())
  addressName           String    @default("")
  name                  String    @default("")
  streetAddress         String    @default("")
  streetAddress2        String    @default("")
  city                  String    @default("")
  postCode              String    @default("")
  country               String    @default("")
  telNo                 String    @default("")
  user                  User?     @relation("UserAddress_user", fields: [userId], references: [id])
  userId                String?   @map("user")
  createdAt             DateTime? @default(now())
  lastModification      DateTime? @default(now()) @updatedAt
  from_User_useraddress User[]    @relation("User_useraddress")

  @@index([userId])
}

model ItemsCart {
  id           String     @id @default(cuid())
  user         User?      @relation("ItemsCart_user", fields: [userId], references: [id])
  userId       String?    @map("user")
  items        CartItem[] @relation("ItemsCart_items")
  lastModified DateTime?  @default(now()) @updatedAt
  sum          Decimal    @default("0") @postgresql.Decimal(18, 4)

  @@index([userId])
}

model CartItem {
  id                   String      @id @default(cuid())
  item                 Item?       @relation("CartItem_item", fields: [itemId], references: [id])
  itemId               String?     @map("item")
  amount               Int         @default(0)
  from_ItemsCart_items ItemsCart[] @relation("ItemsCart_items")

  @@index([itemId])
}

model Booking {
  id                    String             @id @default(cuid())
  user                  User?              @relation("Booking_user", fields: [userId], references: [id])
  userId                String?            @map("user")
  items                 Json?
  payment               Paying?            @relation("Booking_payment", fields: [paymentId], references: [id])
  paymentId             String?            @map("payment")
  delivery              Delivery?          @relation("Booking_delivery", fields: [deliveryId], references: [id])
  deliveryId            String?            @map("delivery")
  employee              User?              @relation("Booking_employee", fields: [employeeId], references: [id])
  employeeId            String?            @map("employee")
  status                BookingStatusType?
  createdAt             DateTime?          @default(now())
  lastModification      DateTime?          @default(now()) @updatedAt
  from_Paying_booking   Paying[]           @relation("Paying_booking")
  from_Delivery_booking Delivery[]         @relation("Delivery_booking")

  @@index([userId])
  @@index([paymentId])
  @@index([deliveryId])
  @@index([employeeId])
}

model Item {
  id                  String      @id @default(cuid())
  name                String      @default("")
  description         Json        @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  seoDesc             String      @default("")
  itemTypes           ItemType[]  @relation("Item_itemTypes")
  itemImages          ItemImage[] @relation("Item_itemImages")
  price               Decimal?    @postgresql.Decimal(18, 4)
  stars               Int?
  discount            Discount?   @relation("Item_discount", fields: [discountId], references: [id])
  discountId          String?     @map("discount")
  createdAt           DateTime?   @default(now())
  lastModification    DateTime?   @default(now()) @updatedAt
  from_CartItem_item  CartItem[]  @relation("CartItem_item")
  from_ItemType_items ItemType[]  @relation("ItemType_items")

  @@index([discountId])
}

model Discount {
  id                   String    @id @default(cuid())
  discount             Int?
  nextDelivery         DateTime?
  amountInNextDelivery Int?
  createdAt            DateTime? @default(now())
  lastModification     DateTime? @default(now()) @updatedAt
  from_Item_discount   Item[]    @relation("Item_discount")
}

model ItemType {
  id                   String     @id @default(cuid())
  name                 String     @default("")
  parent               ItemType?  @relation("ItemType_parent", fields: [parentId], references: [id])
  parentId             String?    @map("parent")
  items                Item[]     @relation("ItemType_items")
  createdAt            DateTime?  @default(now())
  lastModification     DateTime?  @default(now()) @updatedAt
  from_Item_itemTypes  Item[]     @relation("Item_itemTypes")
  from_ItemType_parent ItemType[] @relation("ItemType_parent")

  @@index([parentId])
}

model ItemImage {
  id                   String    @id @default(cuid())
  alt                  String    @default("")
  image                Json?
  createdAt            DateTime? @default(now())
  lastModification     DateTime? @default(now()) @updatedAt
  from_Item_itemImages Item[]    @relation("Item_itemImages")
}

model Paying {
  id                   String            @id @default(cuid())
  booking              Booking?          @relation("Paying_booking", fields: [bookingId], references: [id])
  bookingId            String?           @map("booking")
  sumAll               Decimal?          @postgresql.Decimal(18, 4)
  currency             String            @default("")
  externalId           String            @default("")
  status               PayingStatusType?
  createdAt            DateTime?         @default(now())
  lastModification     DateTime?         @default(now()) @updatedAt
  from_Booking_payment Booking[]         @relation("Booking_payment")

  @@index([bookingId])
}

model Delivery {
  id                    String              @id @default(cuid())
  status                DeliveryStatusType?
  externalId            String              @default("")
  booking               Booking?            @relation("Delivery_booking", fields: [bookingId], references: [id])
  bookingId             String?             @map("booking")
  worker                User?               @relation("Delivery_worker", fields: [workerId], references: [id])
  workerId              String?             @map("worker")
  createdAt             DateTime?           @default(now())
  lastModification      DateTime?           @default(now()) @updatedAt
  from_Booking_delivery Booking[]           @relation("Booking_delivery")

  @@index([bookingId])
  @@index([workerId])
}

enum UserRoleType {
  admin
  worker
  customer
}

enum BookingStatusType {
  Created
}

enum PayingStatusType {
  Created
}

enum DeliveryStatusType {
  Created
}