# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: UserRoleType
  useraddress(
    where: UserAddressWhereInput! = {}
    orderBy: [UserAddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserAddress!]
  useraddressCount(where: UserAddressWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  admin
  worker
  customer
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: UserRoleTypeNullableFilter
  useraddress: UserAddressManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input UserAddressManyRelationFilter {
  every: UserAddressWhereInput
  some: UserAddressWhereInput
  none: UserAddressWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: UserRoleType
  useraddress: UserAddressRelateToManyForUpdateInput
}

input UserAddressRelateToManyForUpdateInput {
  disconnect: [UserAddressWhereUniqueInput!]
  set: [UserAddressWhereUniqueInput!]
  create: [UserAddressCreateInput!]
  connect: [UserAddressWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: UserRoleType
  useraddress: UserAddressRelateToManyForCreateInput
}

input UserAddressRelateToManyForCreateInput {
  create: [UserAddressCreateInput!]
  connect: [UserAddressWhereUniqueInput!]
}

type UserAddress {
  id: ID!
  addressName: String
  name: String
  streetAddress: String
  streetAddress2: String
  city: String
  postCode: String
  country: String
  telNo: String
  user: User
  createdAt: DateTime
  lastModification: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserAddressWhereUniqueInput {
  id: ID
}

input UserAddressWhereInput {
  AND: [UserAddressWhereInput!]
  OR: [UserAddressWhereInput!]
  NOT: [UserAddressWhereInput!]
  id: IDFilter
  addressName: StringFilter
  name: StringFilter
  streetAddress: StringFilter
  streetAddress2: StringFilter
  city: StringFilter
  postCode: StringFilter
  country: StringFilter
  telNo: StringFilter
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserAddressOrderByInput {
  id: OrderDirection
  addressName: OrderDirection
  name: OrderDirection
  streetAddress: OrderDirection
  streetAddress2: OrderDirection
  city: OrderDirection
  postCode: OrderDirection
  country: OrderDirection
  telNo: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input UserAddressUpdateInput {
  addressName: String
  name: String
  streetAddress: String
  streetAddress2: String
  city: String
  postCode: String
  country: String
  telNo: String
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserAddressUpdateArgs {
  where: UserAddressWhereUniqueInput!
  data: UserAddressUpdateInput!
}

input UserAddressCreateInput {
  addressName: String
  name: String
  streetAddress: String
  streetAddress2: String
  city: String
  postCode: String
  country: String
  telNo: String
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type ItemsCart {
  id: ID!
  user: User
  items(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  itemsCount(where: CartItemWhereInput! = {}): Int
  lastModified: DateTime
  sum: Decimal
}

scalar Decimal

input ItemsCartWhereUniqueInput {
  id: ID
}

input ItemsCartWhereInput {
  AND: [ItemsCartWhereInput!]
  OR: [ItemsCartWhereInput!]
  NOT: [ItemsCartWhereInput!]
  id: IDFilter
  user: UserWhereInput
  items: CartItemManyRelationFilter
  lastModified: DateTimeNullableFilter
  sum: DecimalFilter
}

input CartItemManyRelationFilter {
  every: CartItemWhereInput
  some: CartItemWhereInput
  none: CartItemWhereInput
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input ItemsCartOrderByInput {
  id: OrderDirection
  lastModified: OrderDirection
  sum: OrderDirection
}

input ItemsCartUpdateInput {
  user: UserRelateToOneForUpdateInput
  items: CartItemRelateToManyForUpdateInput
  lastModified: DateTime
  sum: Decimal
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input ItemsCartUpdateArgs {
  where: ItemsCartWhereUniqueInput!
  data: ItemsCartUpdateInput!
}

type CartItem {
  id: ID!
  item: Item
  amount: Int
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  item: ItemWhereInput
  amount: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input CartItemOrderByInput {
  id: OrderDirection
  amount: OrderDirection
}

input CartItemUpdateInput {
  item: ItemRelateToOneForUpdateInput
  amount: Int
}

input ItemRelateToOneForUpdateInput {
  create: ItemCreateInput
  connect: ItemWhereUniqueInput
  disconnect: Boolean
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  item: ItemRelateToOneForCreateInput
  amount: Int
}

input ItemRelateToOneForCreateInput {
  create: ItemCreateInput
  connect: ItemWhereUniqueInput
}

type Booking {
  id: ID!
  user: User
  items: JSON
  payment: Paying
  delivery: Delivery
  employee: User
  status: BookingStatusType
  createdAt: DateTime
  lastModification: DateTime
}

enum BookingStatusType {
  Created
}

input BookingWhereUniqueInput {
  id: ID
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
  id: IDFilter
  user: UserWhereInput
  payment: PayingWhereInput
  delivery: DeliveryWhereInput
  employee: UserWhereInput
  status: BookingStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input BookingStatusTypeNullableFilter {
  equals: BookingStatusType
  in: [BookingStatusType!]
  notIn: [BookingStatusType!]
  not: BookingStatusTypeNullableFilter
}

input BookingOrderByInput {
  id: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input BookingUpdateInput {
  user: UserRelateToOneForUpdateInput
  items: JSON
  payment: PayingRelateToOneForUpdateInput
  delivery: DeliveryRelateToOneForUpdateInput
  employee: UserRelateToOneForUpdateInput
  status: BookingStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input PayingRelateToOneForUpdateInput {
  create: PayingCreateInput
  connect: PayingWhereUniqueInput
  disconnect: Boolean
}

input DeliveryRelateToOneForUpdateInput {
  create: DeliveryCreateInput
  connect: DeliveryWhereUniqueInput
  disconnect: Boolean
}

input BookingUpdateArgs {
  where: BookingWhereUniqueInput!
  data: BookingUpdateInput!
}

input BookingCreateInput {
  user: UserRelateToOneForCreateInput
  items: JSON
  payment: PayingRelateToOneForCreateInput
  delivery: DeliveryRelateToOneForCreateInput
  employee: UserRelateToOneForCreateInput
  status: BookingStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input PayingRelateToOneForCreateInput {
  create: PayingCreateInput
  connect: PayingWhereUniqueInput
}

input DeliveryRelateToOneForCreateInput {
  create: DeliveryCreateInput
  connect: DeliveryWhereUniqueInput
}

type Item {
  id: ID!
  name: String
  description: Item_description_Document
  seoDesc: String
  itemTypes(
    where: ItemTypeWhereInput! = {}
    orderBy: [ItemTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ItemType!]
  itemTypesCount(where: ItemTypeWhereInput! = {}): Int
  itemImages(
    where: ItemImageWhereInput! = {}
    orderBy: [ItemImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ItemImage!]
  itemImagesCount(where: ItemImageWhereInput! = {}): Int
  price: Decimal
  stars: Int
  discount: Discount
  createdAt: DateTime
  lastModification: DateTime
}

type Item_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ItemWhereUniqueInput {
  id: ID
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  id: IDFilter
  name: StringFilter
  seoDesc: StringFilter
  itemTypes: ItemTypeManyRelationFilter
  itemImages: ItemImageManyRelationFilter
  price: DecimalNullableFilter
  stars: IntNullableFilter
  discount: DiscountWhereInput
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input ItemTypeManyRelationFilter {
  every: ItemTypeWhereInput
  some: ItemTypeWhereInput
  none: ItemTypeWhereInput
}

input ItemImageManyRelationFilter {
  every: ItemImageWhereInput
  some: ItemImageWhereInput
  none: ItemImageWhereInput
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  seoDesc: OrderDirection
  price: OrderDirection
  stars: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ItemUpdateInput {
  name: String
  description: JSON
  seoDesc: String
  itemTypes: ItemTypeRelateToManyForUpdateInput
  itemImages: ItemImageRelateToManyForUpdateInput
  price: Decimal
  stars: Int
  discount: DiscountRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input ItemTypeRelateToManyForUpdateInput {
  disconnect: [ItemTypeWhereUniqueInput!]
  set: [ItemTypeWhereUniqueInput!]
  create: [ItemTypeCreateInput!]
  connect: [ItemTypeWhereUniqueInput!]
}

input ItemImageRelateToManyForUpdateInput {
  disconnect: [ItemImageWhereUniqueInput!]
  set: [ItemImageWhereUniqueInput!]
  create: [ItemImageCreateInput!]
  connect: [ItemImageWhereUniqueInput!]
}

input DiscountRelateToOneForUpdateInput {
  create: DiscountCreateInput
  connect: DiscountWhereUniqueInput
  disconnect: Boolean
}

input ItemUpdateArgs {
  where: ItemWhereUniqueInput!
  data: ItemUpdateInput!
}

input ItemCreateInput {
  name: String
  description: JSON
  seoDesc: String
  itemTypes: ItemTypeRelateToManyForCreateInput
  itemImages: ItemImageRelateToManyForCreateInput
  price: Decimal
  stars: Int
  discount: DiscountRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input ItemTypeRelateToManyForCreateInput {
  create: [ItemTypeCreateInput!]
  connect: [ItemTypeWhereUniqueInput!]
}

input ItemImageRelateToManyForCreateInput {
  create: [ItemImageCreateInput!]
  connect: [ItemImageWhereUniqueInput!]
}

input DiscountRelateToOneForCreateInput {
  create: DiscountCreateInput
  connect: DiscountWhereUniqueInput
}

type Discount {
  id: ID!
  discount: Int
  nextDelivery: DateTime
  amountInNextDelivery: Int
  createdAt: DateTime
  lastModification: DateTime
}

input DiscountWhereUniqueInput {
  id: ID
}

input DiscountWhereInput {
  AND: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  NOT: [DiscountWhereInput!]
  id: IDFilter
  discount: IntNullableFilter
  nextDelivery: DateTimeNullableFilter
  amountInNextDelivery: IntNullableFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input DiscountOrderByInput {
  id: OrderDirection
  discount: OrderDirection
  nextDelivery: OrderDirection
  amountInNextDelivery: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input DiscountUpdateInput {
  discount: Int
  nextDelivery: DateTime
  amountInNextDelivery: Int
  createdAt: DateTime
  lastModification: DateTime
}

input DiscountUpdateArgs {
  where: DiscountWhereUniqueInput!
  data: DiscountUpdateInput!
}

input DiscountCreateInput {
  discount: Int
  nextDelivery: DateTime
  amountInNextDelivery: Int
  createdAt: DateTime
  lastModification: DateTime
}

type ItemType {
  id: ID!
  name: String
  parent: ItemType
  items(
    where: ItemWhereInput! = {}
    orderBy: [ItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Item!]
  itemsCount(where: ItemWhereInput! = {}): Int
  createdAt: DateTime
  lastModification: DateTime
}

input ItemTypeWhereUniqueInput {
  id: ID
}

input ItemTypeWhereInput {
  AND: [ItemTypeWhereInput!]
  OR: [ItemTypeWhereInput!]
  NOT: [ItemTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  parent: ItemTypeWhereInput
  items: ItemManyRelationFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input ItemManyRelationFilter {
  every: ItemWhereInput
  some: ItemWhereInput
  none: ItemWhereInput
}

input ItemTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ItemTypeUpdateInput {
  name: String
  parent: ItemTypeRelateToOneForUpdateInput
  items: ItemRelateToManyForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input ItemTypeRelateToOneForUpdateInput {
  create: ItemTypeCreateInput
  connect: ItemTypeWhereUniqueInput
  disconnect: Boolean
}

input ItemRelateToManyForUpdateInput {
  disconnect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemTypeUpdateArgs {
  where: ItemTypeWhereUniqueInput!
  data: ItemTypeUpdateInput!
}

input ItemTypeCreateInput {
  name: String
  parent: ItemTypeRelateToOneForCreateInput
  items: ItemRelateToManyForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input ItemTypeRelateToOneForCreateInput {
  create: ItemTypeCreateInput
  connect: ItemTypeWhereUniqueInput
}

input ItemRelateToManyForCreateInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

type ItemImage {
  id: ID!
  alt: String
  image: CloudinaryImage_File
  createdAt: DateTime
  lastModification: DateTime
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ItemImageWhereUniqueInput {
  id: ID
}

input ItemImageWhereInput {
  AND: [ItemImageWhereInput!]
  OR: [ItemImageWhereInput!]
  NOT: [ItemImageWhereInput!]
  id: IDFilter
  alt: StringFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input ItemImageOrderByInput {
  id: OrderDirection
  alt: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ItemImageUpdateInput {
  alt: String
  image: Upload
  createdAt: DateTime
  lastModification: DateTime
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ItemImageUpdateArgs {
  where: ItemImageWhereUniqueInput!
  data: ItemImageUpdateInput!
}

input ItemImageCreateInput {
  alt: String
  image: Upload
  createdAt: DateTime
  lastModification: DateTime
}

type Paying {
  id: ID!
  booking: Booking
  sumAll: Decimal
  currency: String
  externalId: String
  status: PayingStatusType
  createdAt: DateTime
  lastModification: DateTime
}

enum PayingStatusType {
  Created
}

input PayingWhereUniqueInput {
  id: ID
}

input PayingWhereInput {
  AND: [PayingWhereInput!]
  OR: [PayingWhereInput!]
  NOT: [PayingWhereInput!]
  id: IDFilter
  booking: BookingWhereInput
  sumAll: DecimalNullableFilter
  currency: StringFilter
  externalId: StringFilter
  status: PayingStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input PayingStatusTypeNullableFilter {
  equals: PayingStatusType
  in: [PayingStatusType!]
  notIn: [PayingStatusType!]
  not: PayingStatusTypeNullableFilter
}

input PayingOrderByInput {
  id: OrderDirection
  sumAll: OrderDirection
  currency: OrderDirection
  externalId: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input PayingUpdateInput {
  booking: BookingRelateToOneForUpdateInput
  sumAll: Decimal
  currency: String
  externalId: String
  status: PayingStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input BookingRelateToOneForUpdateInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
  disconnect: Boolean
}

input PayingUpdateArgs {
  where: PayingWhereUniqueInput!
  data: PayingUpdateInput!
}

input PayingCreateInput {
  booking: BookingRelateToOneForCreateInput
  sumAll: Decimal
  currency: String
  externalId: String
  status: PayingStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input BookingRelateToOneForCreateInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
}

type Delivery {
  id: ID!
  status: DeliveryStatusType
  externalId: String
  booking: Booking
  worker: User
  createdAt: DateTime
  lastModification: DateTime
}

enum DeliveryStatusType {
  Created
}

input DeliveryWhereUniqueInput {
  id: ID
}

input DeliveryWhereInput {
  AND: [DeliveryWhereInput!]
  OR: [DeliveryWhereInput!]
  NOT: [DeliveryWhereInput!]
  id: IDFilter
  status: DeliveryStatusTypeNullableFilter
  externalId: StringFilter
  booking: BookingWhereInput
  worker: UserWhereInput
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input DeliveryStatusTypeNullableFilter {
  equals: DeliveryStatusType
  in: [DeliveryStatusType!]
  notIn: [DeliveryStatusType!]
  not: DeliveryStatusTypeNullableFilter
}

input DeliveryOrderByInput {
  id: OrderDirection
  status: OrderDirection
  externalId: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input DeliveryUpdateInput {
  status: DeliveryStatusType
  externalId: String
  booking: BookingRelateToOneForUpdateInput
  worker: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input DeliveryUpdateArgs {
  where: DeliveryWhereUniqueInput!
  data: DeliveryUpdateInput!
}

input DeliveryCreateInput {
  status: DeliveryStatusType
  externalId: String
  booking: BookingRelateToOneForCreateInput
  worker: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserAddress(data: UserAddressCreateInput!): UserAddress
  createUserAddresses(data: [UserAddressCreateInput!]!): [UserAddress]
  updateUserAddress(
    where: UserAddressWhereUniqueInput!
    data: UserAddressUpdateInput!
  ): UserAddress
  updateUserAddresses(data: [UserAddressUpdateArgs!]!): [UserAddress]
  deleteUserAddress(where: UserAddressWhereUniqueInput!): UserAddress
  deleteUserAddresses(where: [UserAddressWhereUniqueInput!]!): [UserAddress]
  updateItemsCart(
    where: ItemsCartWhereUniqueInput!
    data: ItemsCartUpdateInput!
  ): ItemsCart
  updateItemsCarts(data: [ItemsCartUpdateArgs!]!): [ItemsCart]
  deleteItemsCart(where: ItemsCartWhereUniqueInput!): ItemsCart
  deleteItemsCarts(where: [ItemsCartWhereUniqueInput!]!): [ItemsCart]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(
    where: CartItemWhereUniqueInput!
    data: CartItemUpdateInput!
  ): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createBooking(data: BookingCreateInput!): Booking
  createBookings(data: [BookingCreateInput!]!): [Booking]
  updateBooking(
    where: BookingWhereUniqueInput!
    data: BookingUpdateInput!
  ): Booking
  updateBookings(data: [BookingUpdateArgs!]!): [Booking]
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteBookings(where: [BookingWhereUniqueInput!]!): [Booking]
  createItem(data: ItemCreateInput!): Item
  createItems(data: [ItemCreateInput!]!): [Item]
  updateItem(where: ItemWhereUniqueInput!, data: ItemUpdateInput!): Item
  updateItems(data: [ItemUpdateArgs!]!): [Item]
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteItems(where: [ItemWhereUniqueInput!]!): [Item]
  createDiscount(data: DiscountCreateInput!): Discount
  createDiscounts(data: [DiscountCreateInput!]!): [Discount]
  updateDiscount(
    where: DiscountWhereUniqueInput!
    data: DiscountUpdateInput!
  ): Discount
  updateDiscounts(data: [DiscountUpdateArgs!]!): [Discount]
  deleteDiscount(where: DiscountWhereUniqueInput!): Discount
  deleteDiscounts(where: [DiscountWhereUniqueInput!]!): [Discount]
  createItemType(data: ItemTypeCreateInput!): ItemType
  createItemTypes(data: [ItemTypeCreateInput!]!): [ItemType]
  updateItemType(
    where: ItemTypeWhereUniqueInput!
    data: ItemTypeUpdateInput!
  ): ItemType
  updateItemTypes(data: [ItemTypeUpdateArgs!]!): [ItemType]
  deleteItemType(where: ItemTypeWhereUniqueInput!): ItemType
  deleteItemTypes(where: [ItemTypeWhereUniqueInput!]!): [ItemType]
  createItemImage(data: ItemImageCreateInput!): ItemImage
  createItemImages(data: [ItemImageCreateInput!]!): [ItemImage]
  updateItemImage(
    where: ItemImageWhereUniqueInput!
    data: ItemImageUpdateInput!
  ): ItemImage
  updateItemImages(data: [ItemImageUpdateArgs!]!): [ItemImage]
  deleteItemImage(where: ItemImageWhereUniqueInput!): ItemImage
  deleteItemImages(where: [ItemImageWhereUniqueInput!]!): [ItemImage]
  createPaying(data: PayingCreateInput!): Paying
  createPayings(data: [PayingCreateInput!]!): [Paying]
  updatePaying(where: PayingWhereUniqueInput!, data: PayingUpdateInput!): Paying
  updatePayings(data: [PayingUpdateArgs!]!): [Paying]
  deletePaying(where: PayingWhereUniqueInput!): Paying
  deletePayings(where: [PayingWhereUniqueInput!]!): [Paying]
  createDelivery(data: DeliveryCreateInput!): Delivery
  createDeliveries(data: [DeliveryCreateInput!]!): [Delivery]
  updateDelivery(
    where: DeliveryWhereUniqueInput!
    data: DeliveryUpdateInput!
  ): Delivery
  updateDeliveries(data: [DeliveryUpdateArgs!]!): [Delivery]
  deleteDelivery(where: DeliveryWhereUniqueInput!): Delivery
  deleteDeliveries(where: [DeliveryWhereUniqueInput!]!): [Delivery]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  userAddresses(
    where: UserAddressWhereInput! = {}
    orderBy: [UserAddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserAddress!]
  userAddress(where: UserAddressWhereUniqueInput!): UserAddress
  userAddressesCount(where: UserAddressWhereInput! = {}): Int
  itemsCarts(
    where: ItemsCartWhereInput! = {}
    orderBy: [ItemsCartOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ItemsCart!]
  itemsCart(where: ItemsCartWhereUniqueInput!): ItemsCart
  itemsCartsCount(where: ItemsCartWhereInput! = {}): Int
  cartItems(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  bookings(
    where: BookingWhereInput! = {}
    orderBy: [BookingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Booking!]
  booking(where: BookingWhereUniqueInput!): Booking
  bookingsCount(where: BookingWhereInput! = {}): Int
  items(
    where: ItemWhereInput! = {}
    orderBy: [ItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Item!]
  item(where: ItemWhereUniqueInput!): Item
  itemsCount(where: ItemWhereInput! = {}): Int
  discounts(
    where: DiscountWhereInput! = {}
    orderBy: [DiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Discount!]
  discount(where: DiscountWhereUniqueInput!): Discount
  discountsCount(where: DiscountWhereInput! = {}): Int
  itemTypes(
    where: ItemTypeWhereInput! = {}
    orderBy: [ItemTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ItemType!]
  itemType(where: ItemTypeWhereUniqueInput!): ItemType
  itemTypesCount(where: ItemTypeWhereInput! = {}): Int
  itemImages(
    where: ItemImageWhereInput! = {}
    orderBy: [ItemImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ItemImage!]
  itemImage(where: ItemImageWhereUniqueInput!): ItemImage
  itemImagesCount(where: ItemImageWhereInput! = {}): Int
  payings(
    where: PayingWhereInput! = {}
    orderBy: [PayingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Paying!]
  paying(where: PayingWhereUniqueInput!): Paying
  payingsCount(where: PayingWhereInput! = {}): Int
  deliveries(
    where: DeliveryWhereInput! = {}
    orderBy: [DeliveryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Delivery!]
  delivery(where: DeliveryWhereUniqueInput!): Delivery
  deliveriesCount(where: DeliveryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
